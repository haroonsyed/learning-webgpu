var j = 1e-6, U = typeof Float32Array < "u" ? Float32Array : Array;
Math.hypot || (Math.hypot = function() {
  for (var e = 0, t = arguments.length; t--; )
    e += arguments[t] * arguments[t];
  return Math.sqrt(e);
});
function L() {
  var e = new U(16);
  return U != Float32Array && (e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0), e[0] = 1, e[5] = 1, e[10] = 1, e[15] = 1, e;
}
function ie(e) {
  return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
}
function I(e, t, r) {
  var s = r[0], i = r[1], n = r[2], a, o, c, h, _, l, p, f, g, d, y, m;
  return t === e ? (e[12] = t[0] * s + t[4] * i + t[8] * n + t[12], e[13] = t[1] * s + t[5] * i + t[9] * n + t[13], e[14] = t[2] * s + t[6] * i + t[10] * n + t[14], e[15] = t[3] * s + t[7] * i + t[11] * n + t[15]) : (a = t[0], o = t[1], c = t[2], h = t[3], _ = t[4], l = t[5], p = t[6], f = t[7], g = t[8], d = t[9], y = t[10], m = t[11], e[0] = a, e[1] = o, e[2] = c, e[3] = h, e[4] = _, e[5] = l, e[6] = p, e[7] = f, e[8] = g, e[9] = d, e[10] = y, e[11] = m, e[12] = a * s + _ * i + g * n + t[12], e[13] = o * s + l * i + d * n + t[13], e[14] = c * s + p * i + y * n + t[14], e[15] = h * s + f * i + m * n + t[15]), e;
}
function re(e, t, r) {
  var s = r[0], i = r[1], n = r[2];
  return e[0] = t[0] * s, e[1] = t[1] * s, e[2] = t[2] * s, e[3] = t[3] * s, e[4] = t[4] * i, e[5] = t[5] * i, e[6] = t[6] * i, e[7] = t[7] * i, e[8] = t[8] * n, e[9] = t[9] * n, e[10] = t[10] * n, e[11] = t[11] * n, e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e;
}
function Z(e, t, r, s) {
  var i = s[0], n = s[1], a = s[2], o = Math.hypot(i, n, a), c, h, _, l, p, f, g, d, y, m, u, w, v, b, T, S, G, N, P, k, R, C, z, D;
  return o < j ? null : (o = 1 / o, i *= o, n *= o, a *= o, c = Math.sin(r), h = Math.cos(r), _ = 1 - h, l = t[0], p = t[1], f = t[2], g = t[3], d = t[4], y = t[5], m = t[6], u = t[7], w = t[8], v = t[9], b = t[10], T = t[11], S = i * i * _ + h, G = n * i * _ + a * c, N = a * i * _ - n * c, P = i * n * _ - a * c, k = n * n * _ + h, R = a * n * _ + i * c, C = i * a * _ + n * c, z = n * a * _ - i * c, D = a * a * _ + h, e[0] = l * S + d * G + w * N, e[1] = p * S + y * G + v * N, e[2] = f * S + m * G + b * N, e[3] = g * S + u * G + T * N, e[4] = l * P + d * k + w * R, e[5] = p * P + y * k + v * R, e[6] = f * P + m * k + b * R, e[7] = g * P + u * k + T * R, e[8] = l * C + d * z + w * D, e[9] = p * C + y * z + v * D, e[10] = f * C + m * z + b * D, e[11] = g * C + u * z + T * D, t !== e && (e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e);
}
function ne(e, t, r) {
  var s = Math.sin(r), i = Math.cos(r), n = t[4], a = t[5], o = t[6], c = t[7], h = t[8], _ = t[9], l = t[10], p = t[11];
  return t !== e && (e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[4] = n * i + h * s, e[5] = a * i + _ * s, e[6] = o * i + l * s, e[7] = c * i + p * s, e[8] = h * i - n * s, e[9] = _ * i - a * s, e[10] = l * i - o * s, e[11] = p * i - c * s, e;
}
function ee(e, t, r) {
  var s = Math.sin(r), i = Math.cos(r), n = t[0], a = t[1], o = t[2], c = t[3], h = t[8], _ = t[9], l = t[10], p = t[11];
  return t !== e && (e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = n * i - h * s, e[1] = a * i - _ * s, e[2] = o * i - l * s, e[3] = c * i - p * s, e[8] = n * s + h * i, e[9] = a * s + _ * i, e[10] = o * s + l * i, e[11] = c * s + p * i, e;
}
function ae(e, t, r) {
  var s = Math.sin(r), i = Math.cos(r), n = t[0], a = t[1], o = t[2], c = t[3], h = t[4], _ = t[5], l = t[6], p = t[7];
  return t !== e && (e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = n * i + h * s, e[1] = a * i + _ * s, e[2] = o * i + l * s, e[3] = c * i + p * s, e[4] = h * i - n * s, e[5] = _ * i - a * s, e[6] = l * i - o * s, e[7] = p * i - c * s, e;
}
function oe(e, t, r, s, i) {
  var n = 1 / Math.tan(t / 2), a;
  return e[0] = n / r, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = n, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, i != null && i !== 1 / 0 ? (a = 1 / (s - i), e[10] = (i + s) * a, e[14] = 2 * i * s * a) : (e[10] = -1, e[14] = -2 * s), e;
}
var ce = oe;
function he(e, t, r, s) {
  var i, n, a, o, c, h, _, l, p, f, g = t[0], d = t[1], y = t[2], m = s[0], u = s[1], w = s[2], v = r[0], b = r[1], T = r[2];
  return Math.abs(g - v) < j && Math.abs(d - b) < j && Math.abs(y - T) < j ? ie(e) : (_ = g - v, l = d - b, p = y - T, f = 1 / Math.hypot(_, l, p), _ *= f, l *= f, p *= f, i = u * p - w * l, n = w * _ - m * p, a = m * l - u * _, f = Math.hypot(i, n, a), f ? (f = 1 / f, i *= f, n *= f, a *= f) : (i = 0, n = 0, a = 0), o = l * a - p * n, c = p * i - _ * a, h = _ * n - l * i, f = Math.hypot(o, c, h), f ? (f = 1 / f, o *= f, c *= f, h *= f) : (o = 0, c = 0, h = 0), e[0] = i, e[1] = o, e[2] = _, e[3] = 0, e[4] = n, e[5] = c, e[6] = l, e[7] = 0, e[8] = a, e[9] = h, e[10] = p, e[11] = 0, e[12] = -(i * g + n * d + a * y), e[13] = -(o * g + c * d + h * y), e[14] = -(_ * g + l * d + p * y), e[15] = 1, e);
}
function A() {
  var e = new U(3);
  return U != Float32Array && (e[0] = 0, e[1] = 0, e[2] = 0), e;
}
function H(e, t, r) {
  var s = new U(3);
  return s[0] = e, s[1] = t, s[2] = r, s;
}
function F(e, t, r) {
  return e[0] = t[0] + r[0], e[1] = t[1] + r[1], e[2] = t[2] + r[2], e;
}
function _e(e, t, r) {
  return e[0] = t[0] - r[0], e[1] = t[1] - r[1], e[2] = t[2] - r[2], e;
}
function J(e, t, r) {
  return e[0] = t[0] * r, e[1] = t[1] * r, e[2] = t[2] * r, e;
}
function le(e, t) {
  return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e;
}
function K(e, t) {
  var r = t[0], s = t[1], i = t[2], n = r * r + s * s + i * i;
  return n > 0 && (n = 1 / Math.sqrt(n)), e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e;
}
function de(e, t, r) {
  var s = t[0], i = t[1], n = t[2], a = r[0], o = r[1], c = r[2];
  return e[0] = i * c - n * o, e[1] = n * a - s * c, e[2] = s * o - i * a, e;
}
function Q(e, t, r) {
  var s = t[0], i = t[1], n = t[2], a = r[3] * s + r[7] * i + r[11] * n + r[15];
  return a = a || 1, e[0] = (r[0] * s + r[4] * i + r[8] * n + r[12]) / a, e[1] = (r[1] * s + r[5] * i + r[9] * n + r[13]) / a, e[2] = (r[2] * s + r[6] * i + r[10] * n + r[14]) / a, e;
}
(function() {
  var e = A();
  return function(t, r, s, i, n, a) {
    var o, c;
    for (r || (r = 3), s || (s = 0), i ? c = Math.min(i * r + s, t.length) : c = t.length, o = s; o < c; o += r)
      e[0] = t[o], e[1] = t[o + 1], e[2] = t[o + 2], n(e, e, a), t[o] = e[0], t[o + 1] = e[1], t[o + 2] = e[2];
    return t;
  };
})();
function B() {
  var e = new U(4);
  return U != Float32Array && (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 0), e;
}
function O(e, t, r, s) {
  var i = new U(4);
  return i[0] = e, i[1] = t, i[2] = r, i[3] = s, i;
}
(function() {
  var e = B();
  return function(t, r, s, i, n, a) {
    var o, c;
    for (r || (r = 4), s || (s = 0), i ? c = Math.min(i * r + s, t.length) : c = t.length, o = s; o < c; o += r)
      e[0] = t[o], e[1] = t[o + 1], e[2] = t[o + 2], e[3] = t[o + 3], n(e, e, a), t[o] = e[0], t[o + 1] = e[1], t[o + 2] = e[2], t[o + 3] = e[3];
    return t;
  };
})();
const q = (e, t = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {
  const { device: r } = E, s = r.createBuffer({
    size: e.byteLength,
    usage: t,
    mappedAtCreation: !0
  }), i = s.getMappedRange();
  return new Uint8Array(i).set(
    new Uint8Array(e.buffer, e.byteOffset, e.byteLength)
  ), s.unmap(), s;
}, X = {}, pe = async (e) => {
  if (!e || X[e])
    return;
  console.log("Loading model", e);
  const r = await (await fetch(e)).text(), s = [], i = [], n = [], a = [];
  let o = B(), c = B();
  r.split(`
`).forEach((m) => {
    const u = m.split(" "), w = u[0];
    if (w === "v") {
      const v = O(
        parseFloat(u[1]),
        parseFloat(u[2]),
        parseFloat(u[3]),
        1
      );
      o[0] = Math.max(o[0], v[0]), o[1] = Math.max(o[1], v[1]), o[2] = Math.max(o[2], v[2]), c[0] = Math.min(c[0], v[0]), c[1] = Math.min(c[1], v[1]), c[2] = Math.min(c[2], v[2]), s.push(v);
    } else if (w === "vn") {
      const v = O(
        parseFloat(u[1]),
        parseFloat(u[2]),
        parseFloat(u[3]),
        0
      );
      i.push(v);
    } else if (w === "vt") {
      const v = O(
        parseFloat(u[1]),
        parseFloat(u[2]),
        0,
        0
      );
      n.push(v);
    } else w === "f" && (a.push(u[1]), a.push(u[2]), a.push(u[3]));
  }), c[0] + (o[0] - c[0]) / 2, c[1] + (o[1] - c[1]) / 2, c[2] + (o[2] - c[2]) / 2;
  const h = [], _ = /* @__PURE__ */ new Map();
  let l = [];
  a.forEach((m) => {
    if (!_.has(m)) {
      const u = m.split("/").filter((S) => S !== ""), w = parseInt(u[0]) - 1, v = parseInt(u[1]) - 1, b = parseInt(u[2]) - 1;
      l.push(s[w]), l.push(n[v] || B()), l.push(i[b] || B());
      const T = _.size;
      _.set(m, T);
    }
    h.push(_.get(m));
  });
  const p = l.flatMap((m) => [...m]), f = q(
    new Float32Array(p)
  ), g = q(
    new Int32Array(h),
    GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST
  ), d = h.length, y = {
    vertex_data_gpu: f,
    indices_gpu: g,
    index_count: d
  };
  X[e] = y;
};
class $ {
  constructor({
    id: t,
    name: r,
    scene: s,
    model: i = "",
    shader_path: n = "",
    pipeline: a,
    position: o = A(),
    velocity: c = A(),
    rotation: h = A(),
    scale: _ = H(1, 1, 1),
    texture_diffuse: l = void 0,
    texture_specular: p = void 0,
    texture_normal: f = void 0,
    texture_emissive: g = void 0
  }) {
    this.get_model_matrix = () => {
      const d = L();
      return I(d, d, this.position), ne(d, d, this.rotation[0]), ee(d, d, this.rotation[1]), ae(d, d, this.rotation[2]), re(d, d, this.scale), d;
    }, this.get_model_data = async () => (await pe(this.model), X[this.model]), this.has_texture_diffuse = () => this.texture_diffuse !== void 0 && this.texture_diffuse !== "", this.has_texture_specular = () => this.texture_specular !== void 0 && this.texture_specular !== "", this.has_texture_normal = () => this.texture_normal !== void 0 && this.texture_normal !== "", this.has_texture_emissive = () => this.texture_emissive !== void 0 && this.texture_emissive !== "", this.update = async (d) => {
    }, this.remove_from_scene = (d) => {
      d.objects = d.objects.filter((y) => y !== this);
    }, this.id = t, this.name = r, this.position = o, this.velocity = c, this.rotation = h, this.scale = _, this.model = i, this.texture_diffuse = l, this.texture_specular = p, this.texture_normal = f, this.texture_emissive = g, this.shader_path = n, this.pipeline = a, this.pipeline_key = (a == null ? void 0 : a.get_pipeline_key(n)) || "";
  }
}
class W extends $ {
  constructor({ look_at_target: t, ...r }) {
    super(r), this.up = H(0, 1, 0), this.look_at_target = A(), this.movement_mode = 0, this.rotation_speed = 0.01, this.movement_speed = 0.01, this.mouse_sensitivity = 1e-3, this.look_at = (s) => {
      this.look_at_target = s;
    }, this.get_camera_forward = () => K(
      A(),
      _e(A(), this.look_at_target, this.position)
    ), this.get_camera_right = () => K(
      A(),
      de(A(), this.get_camera_forward(), this.up)
    ), this.get_view_matrix = () => {
      const s = L();
      return I(s, s, this.position), he(s, this.position, this.look_at_target, this.up), s;
    }, this.get_projection_matrix = (s) => {
      if (!s) {
        const n = window.innerWidth, a = window.innerHeight;
        s = n / a;
      }
      const i = L();
      return ce(i, Math.PI / 4, s, 0.1, 1e3), i;
    }, this.update = async (s) => {
      const { key_press: i, key_state: n, mouse_state: a } = E.system_input, { canvas: o } = s;
      if (i.get("`") && (console.log("toggling camera mode"), this.movement_mode === 0 ? (this.movement_mode = 1, o == null || o.requestPointerLock()) : this.movement_mode === 1 ? (document.exitPointerLock(), this.movement_mode = 2) : this.movement_mode === 2 && (this.movement_mode = 0)), this.movement_mode === 0) {
        if (n.get("a") || n.get("d")) {
          const c = n.get("a") ? this.rotation_speed : -this.rotation_speed, h = L();
          I(h, h, this.look_at_target), ee(h, h, c), I(
            h,
            h,
            le(A(), this.look_at_target)
          ), Q(this.position, this.position, h);
        }
      } else if (this.movement_mode === 1) {
        if (a.dx || a.dy) {
          this.get_camera_forward();
          const c = this.get_camera_right(), h = a.dx * this.mouse_sensitivity, _ = a.dy * this.mouse_sensitivity, l = L();
          Z(l, l, -h, this.up), Z(l, l, -_, c), Q(this.position, this.position, l);
          const p = this.get_camera_forward();
          this.get_camera_right(), F(this.look_at_target, this.position, p);
        }
        if (n.get("w") || n.get("s")) {
          const c = n.get("w") ? this.movement_speed : -this.movement_speed, h = this.get_camera_forward();
          J(h, h, c), F(this.position, this.position, h), F(this.look_at_target, this.look_at_target, h);
        }
        if (n.get("a") || n.get("d")) {
          const c = n.get("a") ? -this.movement_speed : this.movement_speed, h = this.get_camera_right();
          J(h, h, c), F(this.position, this.position, h), F(this.look_at_target, this.look_at_target, h);
        }
      } else this.movement_mode;
    }, this.look_at(t || A());
  }
}
class te extends $ {
  constructor({
    color: t = H(1, 1, 1),
    intensity: r = 1,
    ...s
  }) {
    super(s), this.get_uniform_data = () => ({
      position: [...this.position, 0],
      color: this.color
    }), this.color = O(t[0], t[1], t[2], r);
  }
}
class fe {
  constructor() {
    this.registered_pipelines = /* @__PURE__ */ new Map(), this.register_pipeline = (t, r, s) => {
      const i = t.get_pipeline_key(r);
      this.registered_pipelines.has(i) || t.construct_pipeline(r, s).then((n) => {
        this.registered_pipelines.set(i, n);
      });
    }, this.get_registered_pipeline = (t) => this.registered_pipelines.get(t);
  }
}
class ue {
  constructor() {
    this.shaders = /* @__PURE__ */ new Map(), this.get_shader = async (t) => {
      if (!this.shaders.has(t)) {
        const r = await fetch(t);
        this.shaders.set(t, await r.text());
      }
      return this.shaders.get(t);
    }, this.get_registered_shader = (t) => this.shaders.get(t);
  }
}
var M = /* @__PURE__ */ ((e) => (e.SCENE_FRAME_START = "SCENE_FRAME_START", e.SCENE_FRAME_END = "SCENE_FRAME_END", e.SCENE_UPDATE_START = "SCENE_UPDATE_START", e.SCENE_UPDATE_END = "SCENE_UPDATE_END", e.SCENE_RENDER_START = "SCENE_RENDER_START", e.SCENE_RENDER_END = "SCENE_RENDER_END", e))(M || {});
class ge {
  constructor() {
    this.events = /* @__PURE__ */ new Map();
  }
  subscribe(t, r) {
    return this.events.has(t) || this.events.set(t, []), this.events.get(t).includes(r) || this.events.get(t).push(r), r;
  }
  unsubscribe(t, r) {
    const s = this.events.get(t), i = (s == null ? void 0 : s.indexOf(r)) ?? -1;
    i >= 0 && s.splice(i, 1);
  }
  async publish(t, r = {}) {
    if (!this.events.has(t))
      return;
    const i = this.events.get(t).map((n) => n(r));
    await Promise.all(i);
  }
}
class me {
  constructor() {
    this.textures = {}, this.empty_texture = this.get_default_texture();
  }
  get_default_texture() {
    return E.device.createTexture({
      size: [1, 1],
      format: "rgba8unorm",
      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST
    });
  }
  async load_texture(t, r = "rgba8unorm") {
    if (t === void 0 || t === "")
      return this.empty_texture;
    if (this.textures[t])
      return this.textures[t];
    const i = await (await fetch(t)).blob(), n = await createImageBitmap(i, {
      colorSpaceConversion: "none"
    }), a = E.device.createTexture({
      label: t,
      format: r,
      size: [n.width, n.height],
      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
    });
    return E.device.queue.copyExternalImageToTexture(
      { source: n },
      { texture: a },
      [n.width, n.height]
    ), this.textures[t] = a, a;
  }
}
class ve extends $ {
  constructor(t) {
    var i, n;
    super(t), this.parse_workgroup_size = (a, o, c) => {
      if (typeof a == "string")
        switch (a) {
          case "canvas_width":
            return o;
          case "canvas_height":
            return c;
          default:
            return 1;
        }
      else
        return a;
    };
    const r = ((i = t.scene.canvas) == null ? void 0 : i.width) || 1, s = ((n = t.scene.canvas) == null ? void 0 : n.height) || 1;
    this.workgroup_size = [
      this.parse_workgroup_size(
        t.workgroup_size[0],
        r,
        s
      ),
      this.parse_workgroup_size(
        t.workgroup_size[1],
        r,
        s
      ),
      this.parse_workgroup_size(
        t.workgroup_size[2],
        r,
        s
      )
    ];
  }
}
const ye = {
  SceneObject: $,
  Light: te,
  Camera: W,
  ComputeObject: ve
};
class se {
  constructor(t, r, s = 0) {
    this.shader_path = t, this.order = s, this.gpu_pipeline = r;
  }
  static get_pipeline_key(t) {
    return `${t}+${this.get_pipeline_label()}`;
  }
  static get_pipeline_label() {
    throw new Error(
      "Please return a unique label for your pipeline from get_pipeline_label"
    );
  }
  // So this is interesting because it is abstract (workaround via error) and static. Not something possible in java lol.
  //
  // Why static?
  //  This is a builder for actual implementations and gives you the instance.
  //
  // Why not just a constructor/inheritance?
  // Because constructors cannot be async, so I have to use a static async function to build the pipeline.
  //  The alternative is to have the constructor of derived class call the async function with a flag that the pipeline is ready...but I don't want to check flags.
  //
  // Why abstract?
  // I want this abstract because every pipeline will have a unique layout and construction requirements, so I have to defer the implementation.
  // Still thinking of a better way to do this...trickiest part of the code rn
  //
  static async construct_pipeline(t, r) {
    throw new Error(
      "Please implement logic for creating your pipeline, make sure to call super() so the pipeline is registered."
    );
  }
}
class V extends se {
  static get_pipeline_label() {
    return "default_2d_compute";
  }
  // Necessary to construct asynchonously
  static async construct_pipeline(t, r) {
    const s = await r.shader_manager.get_shader(t), { device: i } = E, n = i.createShaderModule({
      code: s
    }), a = i.createComputePipeline({
      layout: "auto",
      compute: {
        module: n,
        entryPoint: "main"
      }
    });
    return new V(t, a);
  }
  async render(t) {
    const r = V.get_pipeline_key(
      this.shader_path
    ), s = t.objects.filter(
      (a) => a.pipeline_key === r
    );
    if (s.length === 0 || !t.texture_view)
      return;
    const i = E.command_encoder.beginComputePass();
    i.setPipeline(this.gpu_pipeline);
    const n = {
      layout: this.gpu_pipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: t.texture_view
        }
      ]
    };
    i.setBindGroup(
      0,
      E.device.createBindGroup(n)
    ), s.forEach((a) => {
      const o = a;
      i.dispatchWorkgroups(
        o.workgroup_size[0],
        o.workgroup_size[1],
        o.workgroup_size[2]
      );
    }), i.end();
  }
}
const we = 4 + 4 * 4 + 4 * 4 + 10 * 4 * 2, xe = {
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,
      buffer: {
        type: "uniform"
      }
    },
    {
      binding: 1,
      visibility: GPUShaderStage.FRAGMENT,
      sampler: {}
    },
    {
      // Diffuse texture
      binding: 2,
      visibility: GPUShaderStage.FRAGMENT,
      texture: {}
    },
    {
      // Specular texture
      binding: 3,
      visibility: GPUShaderStage.FRAGMENT,
      texture: {}
    },
    {
      // Normal texture
      binding: 4,
      visibility: GPUShaderStage.FRAGMENT,
      texture: {}
    },
    {
      // Model transforms
      binding: 5,
      visibility: GPUShaderStage.VERTEX,
      buffer: {
        type: "read-only-storage"
      }
    }
  ]
};
class Y extends se {
  static get_pipeline_label() {
    return "default_3d";
  }
  // Necessary to construct asynchonously
  static async construct_pipeline(t, r) {
    const { shader_manager: s } = r, i = await s.get_shader(t), { device: n } = E, { presentation_format: a } = r, o = n.createShaderModule({
      code: i
    }), c = n.createBindGroupLayout(
      xe
    ), h = n.createRenderPipeline({
      label: "default_3d",
      layout: n.createPipelineLayout({
        bindGroupLayouts: [c]
        // group 0, binding 0
      }),
      vertex: {
        module: o,
        buffers: [
          {
            arrayStride: 16 * 3,
            attributes: [
              {
                shaderLocation: 0,
                // Position
                offset: 0,
                format: "float32x4"
              },
              {
                shaderLocation: 1,
                // UV
                offset: 16,
                format: "float32x4"
              },
              {
                shaderLocation: 2,
                // Normal
                offset: 32,
                format: "float32x4"
              }
            ]
          }
        ]
      },
      fragment: {
        module: o,
        targets: [
          {
            format: a
          }
        ]
      },
      primitive: {
        topology: "triangle-list"
      },
      depthStencil: {
        format: "depth24plus",
        depthWriteEnabled: !0,
        depthCompare: "less"
      }
    }), _ = new Y(t, h);
    return _.uniform_buffer = q(
      new Float32Array(we),
      GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
    ), _;
  }
  async render(t) {
    var N, P;
    const { device: r, command_encoder: s } = E, { texture_manager: i, texture_view: n, depth_texture_view: a } = t, o = Y.get_pipeline_key(this.shader_path), c = t.objects.filter(
      (k) => k.pipeline_key === o
    );
    if (c.length === 0 || !n || !a)
      return;
    const h = s.beginRenderPass({
      colorAttachments: [
        {
          view: n,
          clearValue: [0, 0, 0, 1],
          loadOp: "clear",
          storeOp: "store"
        }
      ],
      depthStencilAttachment: {
        view: a,
        depthClearValue: 1,
        stencilClearValue: 0,
        depthLoadOp: "clear",
        depthStoreOp: "store"
      }
    });
    h.setPipeline(this.gpu_pipeline);
    const _ = c[0], l = _.has_texture_diffuse() ? 1 : 0, p = _.has_texture_specular() ? 1 : 0, f = _.has_texture_normal() ? 1 : 0, g = await i.load_texture(
      _.texture_diffuse
    ), d = await i.load_texture(
      _.texture_specular
    ), y = await i.load_texture(
      _.texture_normal
    ), m = new Float32Array(
      c.flatMap((k) => [...k.get_model_matrix()])
    ), u = c.length * 16 * 4, w = ((N = this.model_transforms) == null ? void 0 : N.size) ?? 0;
    u > w ? ((P = this.model_transforms) == null || P.destroy(), this.model_transforms = q(
      m,
      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
    )) : r.queue.writeBuffer(this.model_transforms, 0, m);
    const v = new Float32Array([
      l,
      p,
      f,
      t.lights.length,
      ...t.camera.get_view_matrix(),
      ...t.camera.get_projection_matrix(),
      ...t.lights.reduce(
        (k, R) => k.concat([...R.position, 0, ...R.color]),
        []
      )
    ]);
    r.queue.writeBuffer(this.uniform_buffer, 0, v);
    const b = {
      layout: this.gpu_pipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: {
            buffer: this.uniform_buffer,
            offset: 0,
            size: this.uniform_buffer.size
          }
        },
        {
          binding: 1,
          resource: r.createSampler({})
        },
        {
          // Diffuse texture
          binding: 2,
          resource: g.createView()
        },
        {
          // Specular texture
          binding: 3,
          resource: d.createView()
        },
        {
          // Normal texture
          binding: 4,
          resource: y.createView()
        },
        {
          // Model transforms
          binding: 5,
          resource: {
            buffer: this.model_transforms,
            offset: 0,
            size: this.model_transforms.size
          }
        }
      ]
    };
    h.setBindGroup(0, r.createBindGroup(b));
    const { vertex_data_gpu: T, indices_gpu: S, index_count: G } = await _.get_model_data();
    h.setVertexBuffer(0, T), h.setIndexBuffer(S, "uint32"), h.drawIndexed(
      G,
      c.length,
      0,
      0,
      0
    ), h.end();
  }
}
const Ee = {
  Default2DComputePipeLine: V,
  Default3DPipeLine: Y
};
class be {
  // TODO: Load scene from file
  // A scene will have resource managers that will load/cache resources (textures, pipelines, shaders, models etc). Unloading a scene will unload all resources cleanly.
  // In other words, resource managers should not be static, rather classes that are instantiated per scene.
  constructor(t = "", r = "canvas") {
    this.active = !0, this.current_frame = 0, this.event_system = new ge(), this.texture_manager = new me(), this.pipeline_manager = new fe(), this.shader_manager = new ue(), this.presentation_format = "rgba8unorm", this.lights = [], this.camera = new W({
      id: "-1",
      name: "camera",
      scene: this
    }), this.objects = [], this.load_scene = async (s, i) => {
      console.log(`Loading scene from: ${s}`);
      try {
        const a = await (await fetch(s)).json(), o = a.canvas || "canvas";
        if (this.canvas = document.getElementById(o), this.resize_scene(), !this.canvas)
          throw alert("Canvas not found"), new Error("Canvas not found");
        const c = this.canvas.getContext(
          "webgpu"
        );
        if (!c)
          throw alert("WebGPU not supported"), new Error("WebGPU not supported");
        c.configure({
          device: E.device,
          format: this.presentation_format,
          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.STORAGE_BINDING
          // Added storage binding for direct output for compute shaders
        }), a["objects"].forEach((_) => {
          const { type: l, pipeline: p, ...f } = _, g = ye[l];
          if (g) {
            const d = new g({
              ...f,
              scene: this,
              pipeline: p && Ee[p]
            });
            d instanceof W ? i.camera = d : d instanceof te ? i.add_light(d) : i.add_object(d);
          } else
            console.error(
              `Unrecognized object type: ${l}, did you add it to the registered types file?`
            );
        });
      } catch (n) {
        console.error(`Error loading scene: ${n}`);
      }
    }, this.resize_scene = () => {
      var i;
      const s = (i = this.canvas) == null ? void 0 : i.getBoundingClientRect();
      this.canvas && s && (this.canvas.width = s.width, this.canvas.height = s.height, this.depth_texture_view = E.device.createTexture({
        label: "Depth Texture",
        size: {
          width: this.canvas.width,
          height: this.canvas.height,
          depthOrArrayLayers: 1
        },
        format: "depth24plus",
        usage: GPUTextureUsage.RENDER_ATTACHMENT
      }).createView());
    }, this.add_light = (s) => {
      this.lights.push(s);
    }, this.add_object = (s) => {
      this.objects.push(s), s.pipeline && this.pipeline_manager.register_pipeline(
        s.pipeline,
        s.shader_path,
        this
      );
    }, this.frame_start = async () => {
      var i;
      if (!this.active)
        return;
      const s = (i = this.canvas) == null ? void 0 : i.getContext(
        "webgpu"
      );
      s && (this.texture_view = s.getCurrentTexture().createView(), await this.event_system.publish(M.SCENE_FRAME_START));
    }, this.frame_end = async () => {
      this.current_frame++, await this.event_system.publish(M.SCENE_FRAME_END);
    }, this.update = async () => {
      if (E.system_input.key_press.get("q") || !this.active) {
        this.active = !1, console.log("Ending scene...");
        return;
      }
      await this.event_system.publish(M.SCENE_UPDATE_START);
      const s = [...this.objects, ...this.lights, this.camera].map(
        (i) => i.update(this)
      );
      await Promise.all(s), await this.event_system.publish(M.SCENE_UPDATE_END);
    }, this.render = async () => {
      await this.event_system.publish(M.SCENE_RENDER_START);
      const i = Array.from(
        this.pipeline_manager.registered_pipelines.values()
      ).reduce((a, o) => {
        const c = o.order;
        return a.has(c) || a.set(c, []), a.get(c).push(o), a;
      }, /* @__PURE__ */ new Map()), n = Array.from(i.keys()).sort();
      for (const a of n) {
        const c = i.get(a).map(
          (h) => h.render(this)
        );
        await Promise.all(c);
      }
      await this.event_system.publish(M.SCENE_RENDER_END);
    }, this.load_scene(t, this).then(() => {
      window.addEventListener("resize", this.resize_scene), this.event_system.subscribe(
        M.SCENE_FRAME_START,
        this.update
      ), this.event_system.subscribe(
        M.SCENE_UPDATE_END,
        this.render
      ), this.event_system.subscribe(
        M.SCENE_RENDER_END,
        this.frame_end
      );
    });
  }
}
class Te {
  constructor() {
    this.key_state = /* @__PURE__ */ new Map(), this.key_press = /* @__PURE__ */ new Map(), this.mouse_state = {
      x: 0,
      y: 0,
      dx: 0,
      dy: 0,
      left: !1,
      right: !1,
      middle: !1,
      left_click: !1,
      right_click: !1,
      middle_click: !1
    }, window.addEventListener("keydown", (t) => {
      this.key_state.set(t.key, !0);
    }), window.addEventListener("keyup", (t) => {
      this.key_state.set(t.key, !1);
    }), window.addEventListener("keypress", (t) => {
      this.key_press.set(t.key, !0);
    }), window.addEventListener("mousemove", (t) => {
      this.mouse_state.dx = t.movementX, this.mouse_state.dy = t.movementY, this.mouse_state.x = t.x, this.mouse_state.y = t.y;
    }), window.addEventListener("mousedown", (t) => {
      t.button === 0 ? this.mouse_state.left = !0 : t.button === 1 ? this.mouse_state.middle = !0 : t.button === 2 && (this.mouse_state.right = !0);
    }), window.addEventListener("mouseup", (t) => {
      t.button === 0 ? this.mouse_state.left = !1 : t.button === 1 ? this.mouse_state.middle = !1 : t.button === 2 && (this.mouse_state.right = !1);
    }), window.addEventListener("click", (t) => {
      t.button === 0 ? this.mouse_state.left_click = !0 : t.button === 1 ? this.mouse_state.middle_click = !0 : t.button === 2 && (this.mouse_state.right_click = !0);
    });
  }
  reset() {
    this.key_state.clear(), this.key_press.clear(), this.mouse_state = {
      x: 0,
      y: 0,
      dx: 0,
      dy: 0,
      left: !1,
      right: !1,
      middle: !1,
      left_click: !1,
      right_click: !1,
      middle_click: !1
    };
  }
}
const x = class x {
  static async start() {
    await x.init_webgpu();
    const t = "./system_core_config.json";
    x.config = await (await fetch(t)).json(), x.system_input = new Te(), x.scenes.push(new be(x.config.start_scene)), console.log("SystemCore initialized, starting event loop..."), x.event_loop();
  }
  static async init_webgpu() {
    var s;
    const t = await ((s = navigator.gpu) == null ? void 0 : s.requestAdapter()), r = await (t == null ? void 0 : t.requestDevice());
    if (!t || !r)
      throw alert("WebGPU not supported"), new Error("WebGPU not supported");
    x.adapter = t, x.device = r;
  }
  static async event_loop() {
    x.command_encoder = x.device.createCommandEncoder(), await Promise.all(this.scenes.map((t) => t.frame_start())), x.device.queue.submit([x.command_encoder.finish()]), requestAnimationFrame(() => x.event_loop()), this.system_input.reset();
  }
};
x.scenes = [];
let E = x;
export {
  E as SystemCore,
  Ee as registered_pipeline_types,
  ye as registered_scene_object_types
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
